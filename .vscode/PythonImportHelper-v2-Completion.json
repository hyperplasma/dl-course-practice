[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "torch.nn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn",
        "description": "torch.nn",
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "torchvision",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torchvision",
        "description": "torchvision",
        "detail": "torchvision",
        "documentation": {}
    },
    {
        "label": "transforms",
        "importPath": "torchvision",
        "description": "torchvision",
        "isExtraImport": true,
        "detail": "torchvision",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "torchvision.models.segmentation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torchvision.models.segmentation",
        "description": "torchvision.models.segmentation",
        "detail": "torchvision.models.segmentation",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "albumentations",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "albumentations",
        "description": "albumentations",
        "detail": "albumentations",
        "documentation": {}
    },
    {
        "label": "SkinDataset",
        "importPath": "skin_dataset",
        "description": "skin_dataset",
        "isExtraImport": true,
        "detail": "skin_dataset",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "draw_progress_bar",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "plot_preds",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "draw_progress_bar",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "plot_preds",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "MultiClassDiceCoeff",
        "importPath": "dice_loss",
        "description": "dice_loss",
        "isExtraImport": true,
        "detail": "dice_loss",
        "documentation": {}
    },
    {
        "label": "MultiClassDiceLoss",
        "importPath": "dice_loss",
        "description": "dice_loss",
        "isExtraImport": true,
        "detail": "dice_loss",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "get_fcn_resnet50",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ChrmDataset",
        "importPath": "chrm_dataset",
        "description": "chrm_dataset",
        "isExtraImport": true,
        "detail": "chrm_dataset",
        "documentation": {}
    },
    {
        "label": "MultiClassDiceCoeff",
        "kind": 6,
        "importPath": "dl_2_isic_seg.dice_loss",
        "description": "dl_2_isic_seg.dice_loss",
        "peekOfCode": "class MultiClassDiceCoeff(nn.Module):\n    def __init__(self, num_classes, smooth=1e-6, skip_bg=True):\n        super(MultiClassDiceCoeff, self).__init__()\n        self.num_classes = num_classes\n        self.smooth = smooth\n        self.skip_bg = skip_bg\n    def forward(self, inputs, targets):\n        '''\n        inputs:UNet的输出 (N, C, H, W)\n        targets: ground-truth mask (N, H, W)",
        "detail": "dl_2_isic_seg.dice_loss",
        "documentation": {}
    },
    {
        "label": "MultiClassDiceLoss",
        "kind": 6,
        "importPath": "dl_2_isic_seg.dice_loss",
        "description": "dl_2_isic_seg.dice_loss",
        "peekOfCode": "class MultiClassDiceLoss(nn.Module):\n    def __init__(self, num_classes, smooth=1e-6, skip_bg=True):\n        super(MultiClassDiceLoss, self).__init__()\n        self.dice_coeff = MultiClassDiceCoeff(num_classes, smooth, skip_bg)\n    def forward(self, inputs, targets):\n        dice_coeff = self.dice_coeff(inputs, targets)\n        # Return the negative of the mean Dice coefficient (to maximize Dice loss)\n        return 1.0-dice_coeff\n# Example usage:\n# num_classes = 3 # Number of classes in your dataset",
        "detail": "dl_2_isic_seg.dice_loss",
        "documentation": {}
    },
    {
        "label": "get_fcn_resnet50",
        "kind": 2,
        "importPath": "dl_2_isic_seg.models",
        "description": "dl_2_isic_seg.models",
        "peekOfCode": "def get_fcn_resnet50(num_classes=2, pretrained=False):\n    model = seg.fcn_resnet50(weights=None if not pretrained else 'segmentation')\n    # 修改模型输出层\n    model.classifier[-1] = torch.nn.Conv2d(model.classifier[-1].in_channels, num_classes, kernel_size=(1, 1))\n    model.aux_classifier = None\n    return model\nif __name__ == '__main__':\n    model = get_fcn_resnet50(num_classes=10)\n    model.eval()\n    # 输入(3, 224, 224)，输出(10, 224, 224)",
        "detail": "dl_2_isic_seg.models",
        "documentation": {}
    },
    {
        "label": "SkinDataset",
        "kind": 6,
        "importPath": "dl_2_isic_seg.skin_dataset",
        "description": "dl_2_isic_seg.skin_dataset",
        "peekOfCode": "class SkinDataset(Dataset):\n    def __init__(self, data_root, subset=\"train\", transform=None):\n        self.transform = transform\n        im_root = \"\"\n        mask_root = \"\"\n        if subset == \"train\":\n            im_root = osp.join(data_root, \"ISBI2016_ISIC_Part1_Training_Data\")\n            mask_root = osp.join(data_root, \"ISBI2016_ISIC_Part1_Training_GroundTruth\")\n        else:\n            im_root = osp.join(data_root, \"ISBI2016_ISIC_Part1_Test_Data\")",
        "detail": "dl_2_isic_seg.skin_dataset",
        "documentation": {}
    },
    {
        "label": "draw_progress_bar",
        "kind": 2,
        "importPath": "dl_2_isic_seg.util",
        "description": "dl_2_isic_seg.util",
        "peekOfCode": "def draw_progress_bar(cur, total, bar_len=50):\n    \"\"\"\n        Print progress bar during training\n    \"\"\"\n    cur_len = int(cur / total * bar_len)\n    sys.stdout.write('\\r')\n    sys.stdout.write(\"[{:<{}}] {}/{}\".format(\"=\" * cur_len, bar_len, cur, total))\n    sys.stdout.flush()\ndef plot_preds(ims, preds, masks):\n    '''",
        "detail": "dl_2_isic_seg.util",
        "documentation": {}
    },
    {
        "label": "plot_preds",
        "kind": 2,
        "importPath": "dl_2_isic_seg.util",
        "description": "dl_2_isic_seg.util",
        "peekOfCode": "def plot_preds(ims, preds, masks):\n    '''\n    用于可视化训练中间结果\n    '''\n    preds = torch.softmax(preds, dim=1)\n    ims = ims.detach().cpu().numpy()  \n    preds = preds.detach().cpu().numpy()  \n    masks = masks.detach().cpu().numpy()  \n    plt.subplot(1, 3, 1)   \n    plt.imshow(np.uint8(ims[0, ...]).transpose((1,2,0)))  ",
        "detail": "dl_2_isic_seg.util",
        "documentation": {}
    },
    {
        "label": "ChrmDataset",
        "kind": 6,
        "importPath": "dl_3_chrm.chrm_dataset",
        "description": "dl_3_chrm.chrm_dataset",
        "peekOfCode": "class ChrmDataset(Dataset):\n    def __init__(self, data_roots, transforms=None):\n        '''\n        data_roots: 数据集路径字典 e.g.,{'labeled path':1, 'unlabeled path':0}，其中0和1表示无标签和有标签\n        '''\n        self.transforms = transforms\n        self.samples = []\n        for data_root in data_roots:\n            has_label = data_roots[data_root]\n            if has_label:",
        "detail": "dl_3_chrm.chrm_dataset",
        "documentation": {}
    },
    {
        "label": "os.environ['KMP_DUPLICATE_LIB_OK']",
        "kind": 5,
        "importPath": "dl_3_chrm.chrm_dataset",
        "description": "dl_3_chrm.chrm_dataset",
        "peekOfCode": "os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'\nclass ChrmDataset(Dataset):\n    def __init__(self, data_roots, transforms=None):\n        '''\n        data_roots: 数据集路径字典 e.g.,{'labeled path':1, 'unlabeled path':0}，其中0和1表示无标签和有标签\n        '''\n        self.transforms = transforms\n        self.samples = []\n        for data_root in data_roots:\n            has_label = data_roots[data_root]",
        "detail": "dl_3_chrm.chrm_dataset",
        "documentation": {}
    },
    {
        "label": "EMA",
        "kind": 6,
        "importPath": "dl_3_chrm.train",
        "description": "dl_3_chrm.train",
        "peekOfCode": "class EMA():\n    def __init__(self, model, decay=0.98):\n        self.model = model\n        self.decay = decay\n        self.shadow = {}\n        self.backup = {}\n        self.register()\n    def register(self):\n        \"\"\"\n        初始化时调用，将student的参数初始化至shadow",
        "detail": "dl_3_chrm.train",
        "documentation": {}
    },
    {
        "label": "draw_progress_bar",
        "kind": 2,
        "importPath": "dl_3_chrm.util",
        "description": "dl_3_chrm.util",
        "peekOfCode": "def draw_progress_bar(cur, total, bar_len=50):\n    \"\"\"\n        Print progress bar during training\n    \"\"\"\n    cur_len = int(cur / total * bar_len)\n    sys.stdout.write('\\r')\n    sys.stdout.write(\"[{:<{}}] {}/{}\".format(\"=\" * cur_len, bar_len, cur, total))\n    sys.stdout.flush()\ndef plot_preds(ims, preds, masks):\n    '''",
        "detail": "dl_3_chrm.util",
        "documentation": {}
    },
    {
        "label": "plot_preds",
        "kind": 2,
        "importPath": "dl_3_chrm.util",
        "description": "dl_3_chrm.util",
        "peekOfCode": "def plot_preds(ims, preds, masks):\n    '''\n    用于可视化训练中间结果\n    '''\n    preds = torch.softmax(preds, dim=1)\n    ims = ims.detach().cpu().numpy()  \n    preds = preds.detach().cpu().numpy()  \n    masks = masks.detach().cpu().numpy()  \n    plt.subplot(1, 3, 1)   \n    plt.imshow(np.uint8(ims[0, ...]).transpose((1,2,0)))  ",
        "detail": "dl_3_chrm.util",
        "documentation": {}
    }
]